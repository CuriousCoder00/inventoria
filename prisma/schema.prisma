generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id    String @id @default(uuid())
  email String @unique

  firstName String
  lastName  String

  avatar String? @db.Text

  password    String
  inventories Inventory[]
  accounts    Account[]

  emailVerified DateTime?

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  SystemActivityLog    SystemActivityLog[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model Inventory {
  id          Int    @id @default(autoincrement())
  name        String @unique(map: "Unique_Inventory_Name")
  description String

  image String? @db.Text

  status InventoryStatus @default(DRAFT)

  user   User   @relation(fields: [userId], references: [id])
  userId String
  items  Item[]

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  InventoryActivityLog InventoryActivityLog[]

  @@unique([name])
}

enum InventoryStatus {
  ACTIVE
  ARCHIVED
  DRAFT
  OUT_OF_STOCK
}

model Item {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  image       String? @db.Text
  quantity    Int
  price       Float

  status ItemStatus @default(AVAILABLE)

  category String
  tags     String[] @db.Text

  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Sale      Sale[]
}

enum ItemStatus {
  AVAILABLE
  UNAVAILABLE
  OUT_OF_STOCK
}

model Visit {
  id          Int      @id @default(autoincrement())
  inventoryId Int
  createdAt   DateTime @default(now())
}

model Sale {
  id         Int       @id @default(autoincrement())
  itemId     Int
  item       Item      @relation(fields: [itemId], references: [id])
  userId     String
  quantity   Int
  totalPrice Float
  createdAt  DateTime  @default(now())
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model Customer {
  id     String @id @default(uuid())
  email  String @unique
  name   String
  userId String // owner of the customer (you)
  sales  Sale[]
}

model SystemActivityLog {
  id        Int      @id @default(autoincrement())
  userId    String
  action    String // "created_inventory", "deleted_account", etc.
  message   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model InventoryActivityLog {
  id          Int      @id @default(autoincrement())
  inventoryId Int
  entityType  String // "Inventory", "Item"
  entityId    Int? // ID of the modified item/inventory
  action      String // "created", "updated", "deleted"
  message     String
  createdAt   DateTime @default(now())

  inventory Inventory @relation(fields: [inventoryId], references: [id])
}
