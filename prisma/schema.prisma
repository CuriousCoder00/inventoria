generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id    String @id @default(uuid())
  email String @unique

  firstName String
  lastName  String

  avatar String? @db.Text

  password    String
  inventories Inventory[]
  accounts    Account[]

  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model Inventory {
  id          Int    @id @default(autoincrement())
  name        String @unique(map: "Unique_Inventory_Name")
  description String

  address String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
  items  Item[]

  @@unique([name])
}

model Item {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId Int
}
